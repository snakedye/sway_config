#!/bin/sh

# Autostart
~/.local/bin/eww daemon
riverctl spawn 'kile'
riverctl spawn 'mpDris2'
riverctl spawn '~/.local/bin/notification'
riverctl spawn 'nm-applet --indicator'
riverctl spawn '/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1'
riverctl spawn 'mpd ~/.config/mpd/mpd.conf'
riverctl spawn '/usr/lib/xdg-desktop-portal-wlr'
riverctl spawn 'swayidle -w timeout 1080 "swaylock -f" after-resume "swaylock -f"'
if [ -e /tmp/ewwpipe ]; then
  mkfifo /tmp/ewwpipe
fi
pamixer --get-volume > /tmp/ewwpipe

# Sourcing layouts
source ~/.config/river/layout

# Wallpaper
riverctl spawn "swaybg -o '*' -i '/home/bryan/wallpapers/ghost.png' -m tile"

# Use the "logo" key as the primary modifier
mod="Mod4"

# Mod+Shift+Return to start an instance of foot (https://codeberg.org/dnkl/foot)
riverctl map normal $mod Return spawn foot

# Mod+Space Launch wofi -drun
riverctl map normal $mod Space spawn "wofi -I"

# Screen lock
riverctl map normal $mod f1 spawn swaylock

# Cursor behaviour
riverctl focus-follows-cursor normal

# Mod+Q to close the focused view
riverctl map normal $mod X close

# Mod+E to exit river
riverctl map normal $mod+Shift E exit

# Mod+C for wofi-emoji
riverctl map normal $mod C spawn ~/.local/bin/wofi-emoji

# Mod+J and Mod+K to focus the next/previous view in the layout stack
riverctl map normal $mod J focus-view next
riverctl map normal $mod K focus-view previous

# Mod+Shift+J and Mod+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal $mod+Shift J swap next
riverctl map normal $mod+Shift K swap previous

# Screenshot with Swappy
riverctl map normal None print spawn 'fish -c "slurpshot -g"'
riverctl map normal Shift print spawn 'grim - | swappy -f -'

# Screen recording with wf-recorder
riverctl map normal $mod+Shift R spawn 'fish -c "slurpshot -wf"'

# Mod+Period and Mod+Comma to focus the next/previous output
riverctl map normal Control+Mod1 L focus-output next
riverctl map normal Control+Mod1 H focus-output previous

# Mod+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal $mod+Shift L spawn "riverctl send-to-output next; riverctl focus-output next"
riverctl map normal $mod+Shift H spawn "riverctl send-to-output previous; riverctl focus-output previous"

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough
riverctl declare-mode testing

# Mod+Return to bump the focused view to the top of the layout stack, making
# it the new master
riverctl map normal $mod+Shift Return zoom

# Formats layouts in a single line
inline () {
  echo $@ | tr -d '\r\n' | sed 's/ //g'
}


# Keybindings for kile
for mode in "normal" "testing"
do
  case "$mode" in
    normal)
      layout="kile"
      ;;
    *)
      layout="randy"
      ;;
  esac
  # Mod+H and Mod+L to decrease/increase the width of the master column by 5%
  riverctl map "${mode}" $mod H mod-layout-value "${layout}" fixed main_factor -0.05
  riverctl map "${mode}" $mod L mod-layout-value "${layout}" fixed main_factor 0.05

  # Mod+Shift+{K, L} to increment/decrement the number of master views in the layout
  riverctl map "${mode}" $mod+Control K mod-layout-value "${layout}" int main_amount 1
  riverctl map "${mode}" $mod+Control J mod-layout-value "${layout}" int main_amount -1

  # Mod+Shift+{K, L} to move the index of the main views in the layout
  riverctl map "${mode}" Control+Mod1 K mod-layout-value "${layout}" int main_index 1
  riverctl map "${mode}" Control+Mod1 J mod-layout-value "${layout}" int main_index -1

  # Mod+Alt+{J,K} to decrease/increase the view padding
  riverctl map "${mode}" $mod+Mod1 J mod-layout-value "${layout}" int view_padding -5
  riverctl map "${mode}" $mod+Mod1 K mod-layout-value "${layout}" int view_padding +5

  # Custom layouts
  riverctl map "${mode}" $mod U set-layout-value "${layout}" string focused "({v:h,t,h};1;0.55;1)"
  riverctl map "${mode}" $mod+Shift Y set-layout-value "${layout}" string focused "$RSTACK"
  riverctl map "${mode}" $mod Y set-layout-value "${layout}" string focused "$STACK"
  riverctl map "${mode}" $mod+Shift D set-layout-value "${layout}" string focused "$RTAB"
  riverctl map "${mode}" $mod D set-layout-value "${layout}" string focused "$TAB"
done

# Declaring scratchpads and their keybinds
for key in M N B
do
  case "$key" in
    M)
      i=20
      ;;
    N)
      i=21
      ;;
    B)
      i=22
      ;;
  esac
  tagmask=$((1 << ($i - 1)))

  # Mod+{M, N, B} to focus tag [20-22]
  riverctl map normal $mod $key set-focused-tags $tagmask

  # Mod+Shift+{M, N, B} to tag focused view with tag [20-22]
  riverctl map normal $mod+Shift $key set-view-tags $tagmask

  # Mod+Ctrl+{M, N, B} to toggle focus of tag [20-22]
  riverctl map normal $mod+Control $key toggle-focused-tags $tagmask

  # Mod+Shift+Ctrl+{M, N, B} to toggle tag [20-22] of focused view
  riverctl map normal $mod+Mod1 $key toggle-view-tags $tagmask
done

# Mod+Alt+Control+{H,J,K,L} to snap views to screen edges
riverctl map normal $mod+Mod1+Control H snap left
riverctl map normal $mod+Mod1+Control J snap down
riverctl map normal $mod+Mod1+Control K snap up
riverctl map normal $mod+Mod1+Control L snap right

# Mod+Alt+Shif+{H,J,K,L} to resize views
riverctl map normal $mod+Mod1+Shift H resize horizontal -100
riverctl map normal $mod+Mod1+Shift J resize vertical 100
riverctl map normal $mod+Mod1+Shift K resize vertical -100
riverctl map normal $mod+Mod1+Shift L resize horizontal 100

# Mod + Left Mouse Button to move views
riverctl map-pointer normal $mod BTN_LEFT move-view

# Mod + Right Mouse Button to resize views
riverctl map-pointer normal $mod BTN_RIGHT resize-view

# Mod + Scroll up to switch to previous output
riverctl map-pointer normal $mod KEY_SCROLLUP focus-output previous

# Mod + Scroll up to switch to next output
riverctl map-pointer normal $mod KEY_SCROLLDOWN focus-output next

# Declaring tags and their keybinds
for i in $(seq 1 9); do
    tagmask=$((1 << ($i - 1)))

    # Mod+[1-9] to focus tag [0-8]
    riverctl map normal $mod $i set-focused-tags $tagmask

    # Mod+Shift+[1-9] to tag focused view with tag [0-8]
    riverctl map normal $mod+Shift $i set-view-tags $tagmask

    # Mod+Ctrl+[1-9] to toggle focus of tag [0-8]
    riverctl map normal $mod+Control $i toggle-focused-tags $tagmask

    # Mod+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
    riverctl map normal $mod+Mod1 $i toggle-view-tags $tagmask
done

# Mod+0 to focus all tags
# Mod+Shift+0 to tag focused view with all tags
all_tags_mask=$(((1 << 32) - 1))
riverctl map normal $mod 0 set-focused-tags $all_tags_mask
riverctl map normal $mod+Shift 0 set-view-tags $all_tags_mask

# Mod+Space to toggle float
riverctl map normal Mod1 Space toggle-float

# Mod+F to toggle fullscreen
riverctl map normal $mod F toggle-fullscreen

# Mod+F11 to enter passthrough mode
riverctl map normal $mod F11 enter-mode passthrough

# Mod+F11 to return to normal mode
riverctl map passthrough $mod F11 enter-mode normal
riverctl map testing $mod F10 enter-mode normal

# Mod+F10 to enter testing mode
riverctl map normal $mod F10 enter-mode testing

# Various media key mapping for both normal and locked mode
for mode in normal locked
do
	riverctl map "${mode}" None XF86Eject             spawn eject -T
	riverctl map "${mode}" None XF86AudioRaiseVolume  spawn ~/.local/bin/volume up
	riverctl map "${mode}" None XF86AudioLowerVolume  spawn ~/.local/bin/volume down
	riverctl map "${mode}" None XF86AudioMute         spawn ~/.config/eww/scripts/mute
	riverctl map "${mode}" None XF86AudioMedia        spawn playerctl play-pause
	riverctl map "${mode}" None XF86AudioPlay         spawn playerctl play-pause
	riverctl map "${mode}" None XF86AudioPrev         spawn playerctl previous
	riverctl map "${mode}" None XF86AudioNext         spawn playerctl next
	riverctl map "${mode}" None XF86MonBrightnessUp   spawn light -A 5
	riverctl map "${mode}" None XF86MonBrightnessDown spawn light -U 5
done

# Set repeat rate
riverctl set-repeat 50 300

# Set app-ids of views which should float
riverctl float-filter-add "float"
riverctl float-filter-add "popup"
riverctl float-filter-add "swappy"
riverctl float-filter-add "imv"

# Set app-ids of views which should use client side decorations
riverctl csd-filter-add "swappy"

# Set opacity and fade effect
riverctl opacity 1.0 0.9 0.0 0.1 30

# Border color focused
riverctl border-color-focused '#6c5b53'

# Border color focused
riverctl border-color-unfocused '#464646'

# Border width
riverctl border-width 3

# Default layout
riverctl default-layout kile

# Kile configuration
for output in "DP-2" "HDMI-A-1"
do
  riverctl set-layout-value kile int outer_padding 5
  case $output in
    DP-2)
      riverctl set-layout-value kile string all "${STACK}"
      riverctl set-layout-value kile string 32 "{v:h,{h:t,t}}"
      ;;
    HDMI-A-1)
      riverctl set-layout-value kile string all "${RTAB}"
      riverctl set-layout-value kile string 32 "{v:h,{h:t,t}}"
      ;;
  esac
  riverctl attach-mode bottom
  riverctl focus-output next
done
riverctl focus-output next

# Launch eww bars
sleep 5 && ~/.local/bin/eww open-many bar0 bar1
